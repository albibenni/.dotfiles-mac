// Place your key bindings in this file to override the defaultsauto[]
[
    // refactor
    {
        "key": "cmd+shift+v",
        "command": "editor.action.codeAction",
        "args": {
            "kind": "refactor.extract.constant"
        }
    },
    //watch
    // TERMINAL
    {
        "key": "ctrl+shift+k",
        "command": "workbench.action.terminal.focusNext",
        "when": "terminalFocus"
    },
    {
        "key": "ctrl+shift+j",
        "command": "workbench.action.terminal.focusPrevious",
        "when": "terminalFocus"
    },
    {
        "key": "ctrl+shift+n",
        "command": "workbench.action.terminal.new",
        "when": "terminalFocus"
    },
    {
        "key": "ctrl+shift+d",
        "command": "workbench.action.terminal.kill",
        "when": "terminalFocus"
    },

    //Explorer navigation
    {
        "key": "ctrl+e",
        "command": "workbench.explorer.fileView.focus",
        "when": "editorFocus || terminalFocus"
    },
    {
        "key": "ctrl+e",
        "command": "workbench.action.closeSidebar",
        "when": "explorerViewletFocus"
    },
    //File tree
    {
        "key": "a",
        "command": "explorer.newFile",
        "when": "explorerViewletFocus"
    },
    {
        "key": "r",
        "command": "renameFile",
        "when": "explorerViewletFocus"
    },
    {
        "key": "ctrl+a",
        "command": "explorer.newFolder",
        "when": "explorerViewletFocus"
    },

    // find and replace
    {
        "key": "ctrl+f",
        "command": "actions.find",
        "when": "editorFocus"
    },
    {
        "key": "ctrl+r",
        "command": "editor.action.startFindReplaceAction",
        "when": "editorFocus"
    },
    {
        "key": "ctrl+p",
        "command": "find-it-faster.findFiles",
        "when": "editorFocus"
    },
    {
        "key": "ctrl+shift+p",
        "command": "find-it-faster.findWithinFiles",
        "when": "editorFocus"
    },

    //Refactor
    {
        "key": "ctrl+q",
        "command": "editor.action.quickFix",
        "when": "editorHasCodeActionsProvider && textInputFocus && !editorReadonly"
    },
    // {
    //     "key": "ctrl+shift+r",
    //     "command": "editor.action.rename",
    //     "when": "editorHasRenameProvider && editorTextFocus && !editorReadonly"
    // },

    //JUMPS

    // Problem in editor
    {
        "key": "ctrl+[",
        "command": "editor.action.marker.nextInFiles",
        "when": "editorFocus"
    },
    {
        "key": "ctrl+]",
        "command": "editor.action.marker.prevInFiles",
        "when": "editorFocus"
    },

    // ------- minus commands
    {
        "key": "space",
        "command": "-breadcrumbs.revealFocused",
        "when": "breadcrumbsActive && breadcrumbsVisible"
    },

    {
        "key": "ctrl+p",
        "command": "-extension.vim_ctrl+p",
        "when": "editorTextFocus && vim.active && vim.use<C-p> && !inDebugRepl || vim.active && vim.use<C-p> && !inDebugRepl && vim.mode == 'CommandlineInProgress' || vim.active && vim.use<C-p> && !inDebugRepl && vim.mode == 'SearchInProgressMode'"
    },
    {
        "key": "ctrl+p",
        "command": "-cursorUp",
        "when": "textInputFocus"
    },
    {
        "key": "ctrl+p",
        "command": "-workbench.action.quickOpenSelectPrevious",
        "when": "inQuickOpen"
    },
    {
        "key": "ctrl+p",
        "command": "-showPrevParameterHint",
        "when": "editorFocus && parameterHintsMultipleSignatures && parameterHintsVisible"
    },
    {
        "key": "ctrl+r",
        "command": "-workbench.action.tasks.reRunTask",
        "when": "taskCommandsRegistered && !terminalFocus"
    },
    {
        "key": "ctrl+r",
        "command": "-go.test.previous",
        "when": "editorLangId == 'go'"
    },
    {
        "key": "ctrl+r",
        "command": "-workbench.action.quickOpenNavigateNextInRecentFilesPicker",
        "when": "inQuickOpen && inRecentFilesPicker"
    },
    {
        "key": "ctrl+shift+r",
        "command": "-editor.action.refactor",
        "when": "editorHasCodeActionsProvider && textInputFocus && !editorReadonly"
    },
    {
        "key": "cmd+s",
        "command": "-workbench.action.files.save"
    },
    {
        "key": "shift+cmd+j",
        "command": "-find-it-faster.findFiles"
    },
    {
        "key": "shift+cmd+u",
        "command": "-find-it-faster.findWithinFiles"
    },
    {
        "key": "ctrl+e",
        "command": "-cursorLineEnd",
        "when": "textInputFocus"
    },
    {
        "key": "ctrl+shift+e",
        "command": "-cursorLineEndSelect",
        "when": "textInputFocus"
    },
    {
        "key": "ctrl+e",
        "command": "-extension.vim_ctrl+e",
        "when": "editorTextFocus && vim.active && vim.use<C-e> && !inDebugRepl"
    },
    {
        "key": "ctrl+q",
        "command": "-workbench.action.quickOpenNavigateNextInViewPicker",
        "when": "inQuickOpen && inViewsPicker"
    },
    {
        "key": "ctrl+shift+q",
        "command": "-workbench.action.quickOpenNavigatePreviousInViewPicker",
        "when": "inQuickOpen && inViewsPicker"
    },
    {
        "key": "ctrl+q",
        "command": "-workbench.action.quickOpenView"
    },
    {
        "key": "ctrl+q",
        "command": "-extension.vim_winCtrlQ",
        "when": "editorTextFocus && vim.active && vim.use<C-q> && !inDebugRepl"
    },
    {
        "key": "f5",
        "command": "-workbench.action.debug.continue",
        "when": "debugState == 'stopped'"
    },
    {
        "key": "space",
        "command": "-debug.toggleBreakpoint",
        "when": "breakpointsFocused && !inputFocus"
    },
    {
        "key": "ctrl+d",
        "command": "-workbench.action.debug.run",
        "when": "debuggersAvailable && !inDebugMode && !terminalFocus"
    },
    {
        "key": "ctrl+d",
        "command": "-extension.vim_ctrl+d",
        "when": "editorTextFocus && vim.active && vim.use<C-d> && !inDebugRepl"
    },
    {
        "key": "ctrl+d",
        "command": "-deleteRight",
        "when": "textInputFocus"
    },
    {
        "key": "ctrl+d",
        "command": "-list.focusPageDown",
        "when": "listFocus && !inputFocus"
    }
]
